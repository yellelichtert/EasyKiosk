@page "/Receiver"
@using System.Text.Json
@using EasyKiosk.Client.Manager
@using EasyKiosk.Client.UI.Components
@using EasyKiosk.Core.Model
@using EasyKiosk.Core.Model.DTO
@using EasyKiosk.Core.Model.Responses
@using ErrorOr
@using Microsoft.AspNetCore.SignalR.Client

@inject IJSRuntime js

<section id="Orders" class="row flex-grow-1 justify-content-start align-content-start px-3 overflow-scroll bg-dark">
   @if (Orders is not null)
   {
       @foreach (var order in Orders)
       {
           <div class=" d-flex flex-column col-6 vh-50 fs-6 border-3">
               
               <div class="d-flex justify-content-between">
                   <h5>Order: @order.OrderNumber</h5>
                   <p>@order.Time.TimeOfDay</p>
               </div>
               
              
               @foreach (var detail in order.OrderDetails)
               {
                   <p class="text-white"><span>@detail.Qty</span>x @detail.ProductName</p>
               }
           </div>
       }
   }
</section>




@code
{
    [CascadingParameter] public LoadingScreen LoadingScreen { get; set; }
    
    private ConnectionManager _connectionManager;
    private NavigationManager _navigationManager;
    
    private HubConnection _connection;

    
    
    
    
    [Parameter]public List<OrderDto>? Orders { get; set; }
    
    
    public Receiver(ConnectionManager connectionManager, NavigationManager navigationManager)
    {
        _connectionManager = connectionManager;
        _navigationManager = navigationManager;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        
        var data = await _connectionManager.GetInitialDataAsync<ReceiverDataResponse>();
        
        _connection = await _connectionManager.GetHubConnection(_navigationManager);
        Orders = data.Value.OpenOrders.ToList();
        

        await InvokeAsync(StateHasChanged);
        
        
        Console.WriteLine("Hub connection state => " + _connection.State);

        _connection.On<string>("ReceiveOrder", (orderJson) =>
        {
            Console.WriteLine("Order Received");
            Console.WriteLine("OrderJson => " + orderJson);
            
            var order = JsonSerializer.Deserialize<OrderDto>(orderJson);
            Orders.Add(order);
            
            InvokeAsync(StateHasChanged);
        });
    }
}
