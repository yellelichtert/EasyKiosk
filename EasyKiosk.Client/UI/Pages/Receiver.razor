@page "/Receiver"
@using System.Text.Json
@using EasyKiosk.Client.Manager
@using EasyKiosk.Core.Model
@using Microsoft.AspNetCore.SignalR.Client

<div class="d-flex flex-grow-1 bg-dark">
    
    @if (Orders is not null && _products is not null)
    {
        <div class="row">
            @for (int i = 0, c = 0; i < Orders.Count; i++, c++)
            {
                if (c > _colorCodes.Length-1)
                    c = 0;

                
                <div class="col-6" style="border: 0.3em solid @_colorCodes[c]; color: @_colorCodes[c]">
                    <h5>Order: @Orders[i].OrderNumber</h5>
                    @foreach (var detail in Orders[i].OrderDetails)
                    {
                        <p class="text-white"><span>@detail.Qty</span>x - @_products.FirstOrDefault(p => p.Id == detail.ProductId).Name</p>
                    }
                </div>
            }
        </div>
    }
</div>



@code
{
    private ConnectionManager _connectionManager;
    private HubConnection _connection;

    private string[] _colorCodes = ["#ff0000;", "#2bff00;", "#00f7ff;"];
    
    
    
    [Parameter]public List<Order>? Orders { get; set; }

    private Product[]? _products;
    
    public Receiver(ConnectionManager connectionManager)
    {
        _connectionManager = connectionManager;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        
        var initialData = await _connectionManager.GetInitialDataAsync<(List<Order>, Product[])>();

        Console.WriteLine("Past intial");
        
        Orders = initialData.Item1;
  
        
        Console.WriteLine("ProductCount: " + _products.Length);
        
        _connection = await _connectionManager.GetHubConnection();
        
        
        Console.WriteLine("Hub connection state => " + _connection.State);

        _connection.On<string>("ReceiveOrder", (orderJson) =>
        {
            Console.WriteLine("Order Received");
            Console.WriteLine("OrderJson => " + orderJson);
            
            Order order = JsonSerializer.Deserialize<Order>(orderJson);
            Orders.Add(order);
            InvokeAsync(StateHasChanged);
        });


        Console.WriteLine("Order count = " + Orders.Count);
    }
    
}
