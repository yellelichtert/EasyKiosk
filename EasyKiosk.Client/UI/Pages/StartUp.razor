@using System.ComponentModel.DataAnnotations
@using EasyKiosk.Client.Manager
@using EasyKiosk.Core.Model.Enums


@page "/"


@inject ConnectionManager ConnectionManager
@inject NavigationManager NavigationManager


<div class="d-flex w-100 flex-grow-1 align-items-center justify-content-center bg-warning-xs bg-dark-sm bg-info-md bg-light-xl">
    
    
    <div class="d-flex flex-column w-75 h-50 card shadow justify-content-center align-items-center">
        
        <div class="d-flex h-25 justify-content-center">
            <img src="../img/logo.png" alt="Easy kiosk logo" class="img-fluid">
        </div>

       
        <div class="d-flex flex-column p-5">

            @if (_isInitialSetup && !_isRegistering)
            {
                <h5>Let's get started.....</h5>
                <p class="muted">To connect to the server, you'll need to fill in the server adres...</p>

                <EditForm Model="_input" OnValidSubmit="HandleRegistration" Class="d-flex flex-column justify-content-between" FormName="ConnectionSettings">
                    <DataAnnotationsValidator/>
                         
                    <div class="d-flex">
                        <label class="col-3">Ip adress:</label>
                        <label class="col-3 offset-7">Port:</label>
                    </div>
                        
                        
                    <div class="row">
                        <div class="d-flex w-20 container-fluid m-0">
                            <InputNumber @bind-Value="_input.Ip1" class="col-12"/>.
                        </div>
                            
                        <div class="d-flex w-20 container-fluid">
                            <InputNumber @bind-Value="_input.Ip2" class="col-12"/>.
                        </div>
                            
                        <div class="d-flex w-20 container-fluid">
                            <InputNumber @bind-Value="_input.Ip3" class="col-12"/>.
                        </div>
                            
                        <div class="d-flex w-20 container-fluid">
                            <InputNumber @bind-Value="_input.Ip4" class="col-12"/>:
                        </div>
                            
                        <div class="d-flex w-20 container-fluid">
                            <InputNumber @bind-Value="_input.Port" class="col-12"/>
                        </div>
                    </div>
                
                        
                    <div class="d-flex justify-content-end mt-5">
                        <button type="submit" class="btn btn-primary">Connect</button>
                    </div>
                </EditForm>
            }
            else if (!_hasErrors)
            {

                if (_isRegistering)
                {
                    <h5>Registering device</h5>
                    <p class="muted">Continue setting up this device on the server...</p>
                }
                else
                {
                    <h5> Logging in.....</h5>
                }
                
                
                <div class="d-flex justify-content-center mt-2">
                    <Spinner Size="SpinnerSize.Large"/>
                </div>
                
            }
            else
            {
                <h5>Something went wrong!</h5>
                <p class="muted">@_errorMessage</p>          
                <p>@_errorCountDown</p>
            }
            
            
            
        </div>
        
    </div>
    
        
        
</div>



@code {

    private Input _input = new Input();

    private bool _isInitialSetup;
    private bool _isRegistering;

    private bool _hasErrors;
    private string? _errorMessage;
    private int _errorCountDown;


    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            Console.WriteLine("Initilizing setup");

            await base.OnInitializedAsync();

            _isInitialSetup = ConnectionManager.IsInitialSetup();
            if (!_isInitialSetup)
            {
                await HandleLogin();
            }

        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }

    }


    private async Task HandleRegistration()
    {
        _isRegistering = true;

        await ConnectionManager.RegisterAsync(
            $"{_input.Ip1}.{_input.Ip2}.{_input.Ip3}.{_input.Ip4}:{_input.Port}");

        _isRegistering = false;
        _isInitialSetup = false;

        await HandleLogin();
    }


    private async Task HandleLogin()
    {
        Console.WriteLine("Handeling login");
        var result = await ConnectionManager.LoginAsync();
        
        if (result == DeviceType.Kiosk)
        {
            NavigationManager.NavigateTo("/Kiosk");
        }
        else
        {
            NavigationManager.NavigateTo("/Receiver");
        }
    }
    


    private sealed class Input
    {
        [Range(0, 255)] public int Ip1 { get; set; }
        [Range(0, 255)] public int Ip2 { get; set; }
        [Range(0, 255)] public int Ip3 { get; set; }
        [Range(0, 255)] public int Ip4 { get; set; }
        [Range(0, 65535)] public int Port { get; set; }
    }

    }
}