@page "/"
@using System.Text.Json
@using EasyKiosk.Core.Managers
@using EasyKiosk.Core.Model.Enums
@using EasyKiosk.Core.Model.Requests
@using EasyKiosk.Core.Model.Responses
@using EasyKiosk.Core.Model.Settings



@inject SettingsManager<DeviceSettings> SettingsManager;
@inject NavigationManager NavigationManager;

<div class="d-flex w-100 flex-grow-1 align-items-center justify-content-center">
    
    
    <div class="d-flex flex-row w-50 h-50 card shadow">
        
        <div class="d-flex w-50 flex-grow align-items-center justify-content-center text-center">
            <h1>Welcome!</h1>
        </div>

       
        <div class="d-flex flex-column w-75 p-5">

            @if (SettingsManager.Model.IsInitialSetup || _isRegistering)
            {
                <h3>Let's get started.....</h3>

                if (_isRegistering)
                {
                    <p>Registering device.... please continue on the server</p>
                }
                else
                {
                    <EditForm Model="SettingsManager.Model" Class="d-flex flex-column justify-content-between" FormName="ConnectionSettings">
                
                
                        <div class="d-flex justify-content-between">
                            <div class="col">
                                <label>Ip adress:</label>
                                <TextInput @bind-Value="SettingsManager.Model.ServerAdress"></TextInput>
                            </div>
                
                            <div class="col-3">
                                <label>Port:</label>
                                <InputNumber @bind-Value="SettingsManager.Model.Port"></InputNumber>
                            </div>
                        </div>
                
                
                        <div class="d-flex align-items-end">
                            <button type="button" @onclick="HandleDeviceRegistration">Connect</button>
                        </div>
                    </EditForm>
                }
            }
            else if (!_hasErrors)
            {
                @(() => HandleLoginAsync())
                
                
                <h3> Logging in.....</h3>
            }
            else
            {
                <h3>@_errorMessage</h3>
            }
            
            
            
        </div>
        
    </div>
    
        
        
</div>



@code {

    private bool _isRegistering = false;
    private bool _hasErrors = false;
    private string _errorMessage;

    private async Task HandleDeviceRegistration()
    {
        const string endPoint = "/Device/Register";

        _isRegistering = true;

        Console.WriteLine("Starting request on adress => " + SettingsManager.Model.FullAdress+endPoint);
        var httpClient = new HttpClient();
        var result = await httpClient.GetAsync(SettingsManager.Model.FullAdress + endPoint);
        
        
        Console.WriteLine("DoneWithRequest");

        if (!result.IsSuccessStatusCode)
        {
            _hasErrors = true;
            _errorMessage = "Error bij Register";
            return;
        }
        
        var response = await JsonSerializer.DeserializeAsync<DeviceRegisterResponse>(await result.Content.ReadAsStreamAsync());

        SettingsManager.Model.DeviceId = response.Id;
        SettingsManager.Model.DeviceType = response.Type;
        SettingsManager.Model.AccesKey = response.Token;
        SettingsManager.Model.RefreshKey = response.Refresh;

        SettingsManager.Model.IsInitialSetup = false;
        
        await SettingsManager.SaveChangesAsync();

        _isRegistering = false;
    }


    private async Task HandleLoginAsync()
    {
        const string endPoint = "/Device/Login";

        var loginRequest = new DeviceLoginRequest(SettingsManager.Model.DeviceId.Value, SettingsManager.Model.RefreshKey);

        var content = new StringContent(JsonSerializer.Serialize(loginRequest));
        
        var httpClient = new HttpClient();
        var result = await httpClient.PostAsync(SettingsManager.Model.FullAdress + endPoint, content);

        if (!result.IsSuccessStatusCode)
        {
            _hasErrors = true;
            _errorMessage = "Error bij login";
            return;
        }

        var response = await JsonSerializer.DeserializeAsync<DeviceLoginResponse>(await result.Content.ReadAsStreamAsync());
        
        SettingsManager.Model.AccesKey = response.Token;
        SettingsManager.Model.RefreshKey = response.Refresh;
        await SettingsManager.SaveChangesAsync();


        if (SettingsManager.Model.DeviceType == DeviceType.Kiosk)
        {
            NavigationManager.NavigateTo("/kiosk");
        }
        else
        {
            NavigationManager.NavigateTo("/Receiver");
        }
        
        
    }

}